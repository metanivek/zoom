---
description: Commit Conventions
globs: 
---
---
description: Commit Conventions
globs: 
---
# Commit Conventions

Rules for creating and formatting git commits in the repository.

<rule>
name: commit_conventions
description: Standards for writing commit messages and using git
filters:
  # Match git commit operations
  - type: command
    pattern: "git commit"

actions:
  - type: warn
    message: "Use 'git commit --template .commit-template' to ensure proper commit message format"

examples:
  # Bad: Using -m flag or no template
  - input: |
      git commit -m "message"
      git commit

  # Good: Using commit template
  - input: |
      git commit --template .commit-template

guidelines: |
  1. Always use the commit template:
     git commit --template .commit-template

  2. Use conventional commits format:
     - feat: new features
     - fix: bug fixes
     - chore: maintenance tasks
     - docs: documentation only
     - test: test-related changes
     - refactor: code changes that neither fix bugs nor add features
     - style: formatting, missing semicolons, etc.
     - perf: performance improvements
  
  3. Title line format:
     - Start with type: feat, fix, etc.
     - Keep under 60 characters
     - Use imperative mood ("add" not "added")
     - No period at the end
  
  4. Multi-line commits:
     - Leave blank line after title
     - Use bullet points for details
     - Wrap body at 72 characters
     - Explain why, not just what
  
  5. Breaking changes:
     - Mark with ! after type: feat!: or fix!:
     - Explain in commit body

metadata:
  priority: high
  version: 1.1
</rule>

## Examples

❌ Don't do this:
```bash
# No \n in commit messages
git commit -m "feat: add feature\n- detail 1\n- detail 2"

# No cramming details in title
git commit -m "feat: add feature which does this and that and more things too"
```

✅ Do this instead:
```bash
# Use git commit without -m for multi-line messages
git commit --template .commit-template

# The template will guide you through:
feat: add user authentication

Why:
To secure the application and manage user sessions properly.

- Implement JWT-based auth flow
- Add password hashing with bcrypt
- Include refresh token mechanism
```